a[[1]]
a[[2]]
for (i in 1:length(a)){#
	if (!is.na(a[[i]]){#
		b[i] <- a[[i]]#
	}#
}
for (i in 1:length(a)){#
	if (!is.na(a[[i]])){#
		b[i] <- a[[i]]#
	}}
b<- NA
a<- tapply(brpos$age_sel, brpos$id, min)#
for (i in 1:length(a)){#
	if (!is.na(a[[i]])){#
		b[i] <- a[[i]]#
	}}
b
b[is.na(b)]<-0
b
sum(b)/length(b[b>0])
length(b[b>0])
for (i in 1:length(a)){#
	if (!is.na(a[[i]])){#
		b[i] <- a[[i]]#
	}}
c<- NA
c<- b[!is.na(b)]
c
c<- b[b>0]
c
quantile(c, c(0.5, 0.95))/12
average(c)
mean(c)/12
data<- read.csv("~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/brucellosis_incidence.csv")
summary(data)
test.mod<-coxph(Surv(start, stop, convert.time)~brucella, cluster(animal), data=data)  # 0.11
str(data)
br$animal<-as.character(br$animal)
data$animal<-as.character(data$animal)
test.mod<-coxph(Surv(start, stop, convert.time)~brucella, cluster(animal), data=data)
test.mod<-coxph(Surv(start, stop, convert.time)~brucella+ cluster(animal), data=data)  # 0.11
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3+ cluster(animal), data=data)  # 0.11
summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3+ cluster(animal), data=data)  # 0.11#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+age_yr2+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+age_yr2+ I(age_yr2^2)+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*herd2+age_yr2+ I(age_yr2^2)+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*age_yr2+herd2+ I(age_yr2^2)+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*I(age_yr2^2)+age_yr2+herd2+  cluster(animal), data=data); summary(test.mod)
head(data)
data$age_yr2<- floor(data$age_yr)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+age_yr2+ cluster(animal), data=data); summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+age_yr2+ I(age_yr2^2)+ cluster(animal), data=data); summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*herd2+age_yr2+ cluster(animal), data=data); summary(test.mod)
head(data)
summary(data)
data<- read.csv("~/Documents/postdoc_buffology/Last-Thesis-Chapter!!!!!!/final_datasets_copied_from_phdfolder/brucellosis_incidence.csv")#
data$animal<-as.character(data$animal)#
data$age_yr2<- floor(data$age_yr)#
#
# just tb#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3+ cluster(animal), data=data)  # 0.11#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+age_yr2+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3 +herd2+age_yr2+ I(age_yr2^2)+ cluster(animal), data=data); summary(test.mod) # no age^2#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*herd2+age_yr2+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*age_yr2+herd2+ I(age_yr2^2)+ cluster(animal), data=data); summary(test.mod)#
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*I(age_yr2^2)+age_yr2+herd2+  cluster(animal), data=data); summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*age_yr2+herd2+ cluster(animal), data=data); summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*age_yr2+TB_3*herd2+ cluster(animal), data=data); summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*age_yr2+herd2+ cluster(animal), data=data); summary(test.mod)
extractAIC(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*herd2+age_yr2+ cluster(animal), data=data); summary(test.mod)
extractAIC(test.mod)
head(data)
temp<- data[data$convert.time==1]
temp<- data[data$convert.time==1,]
table(temp$age_yr2)
table(temp$age_yr2, temp$herd2)
table(temp$age_yr2, temp$TB_3)
table(temp$herd2, temp$TB_3)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*herd2*age_yr2+ cluster(animal), data=data); summary(test.mod)
hist(TB_3$age)
hist(TB_3$age_yr2)
hist(data$age_yr2)
par(mfrow=c(1,2))#
hist(data$age_yr2, xlab="Age of first capture", col="lightgray")#
hist(temp$age_yr2, xlab="Age of first capture of converters", col="lightgray")
par(mfrow=c(1,2))#
hist(data$age_yr2, xlab="Age of first capture", col="lightgray", main="All buffalo")#
hist(temp$age_yr2, xlab="Age of first capture", col="lightgray", main="Buffalo that became infected with bruc")
data2<- data[data$age_yr2 <6,]
length(data$convert.time[data$convert.time==1])
length(data2$convert.time[data2$convert.time==1])  # 30 converters.
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3+herd2+age_yr2+ cluster(animal), data=data2); summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*herd2+age_yr2+ cluster(animal), data=data2); summary(test.mod)
test.mod<-coxph(Surv(start, stop, convert.time)~ TB_3*age_yr2+herd2+ cluster(animal), data=data2); summary(test.mod)
install.packages("plotrix")#
#
library(plotrix)
library(plotrix)#
#
plot(1:5,type="n",main="Floating Pie test",xlab="",ylab="",axes=FALSE)#
 box()#
 polygon(c(0,0,5.5,5.5),c(0,3,3,0),border="#44aaff",col="#44aaff")#
 floating.pie(1.7,3,c(2,4,4,2,8),radius=0.5,#
  col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))#
 floating.pie(3.1,3,c(1,4,5,2,8),radius=0.5,#
  col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))#
 floating.pie(4,1.5,c(3,4,6,7),radius=0.5,#
  col=c("#ff0066","#00cc88","#44bbff","#8000ff"))#
 draw.circle(3.9,2.1,radius=0.04,col="white")#
 draw.circle(3.9,2.1,radius=0.04,col="white")#
 draw.circle(3.9,2.1,radius=0.04,col="white")#
 draw.circle(4,2.3,radius=0.04,col="white")#
 draw.circle(4.07,2.55,radius=0.04,col="white")#
 draw.circle(4.03,2.85,radius=0.04,col="white")#
 text(c(1.7,3.1,4),c(3.7,3.7,3.7),c("Pass","Pass","Fail"))#
 # type of bullying by sex as superimposed pies#
 plot(0,xlim=c(-1,1),ylim=c(-1,1),type="n",axes=FALSE,#
  main="Type of bullying by sex (Li, 2006)")#
 bc<-floating.pie(0,0,c(90,129,45,67),radius=1,col=2:5)#
 pie.labels(0,0,bc,c("Physical\nbully","Physical\nvictim",#
  "Cyber\nbully","Cyber\nvictim"))#
 bc<-floating.pie(0,0,c(53,37,70,59,29,16,33,34),#
  radius=0.7,col=c("lightblue","pink"))#
 pie.labels(0,0,bc,radius=0.5,labels=rep(c("M","F"),4))
plot(1:5,type="n",main="Floating Pie test",xlab="",ylab="",axes=FALSE)#
 box()#
 polygon(c(0,0,5.5,5.5),c(0,3,3,0),border="#44aaff",col="#44aaff")#
 floating.pie(1.7,3,c(2,4,4,2,8),radius=0.5,#
  col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))#
 floating.pie(3.1,3,c(1,4,5,2,8),radius=0.5,#
  col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))#
 floating.pie(4,1.5,c(3,4,6,7),radius=0.5,#
  col=c("#ff0066","#00cc88","#44bbff","#8000ff"))#
 draw.circle(3.9,2.1,radius=0.04,col="white")#
 draw.circle(3.9,2.1,radius=0.04,col="white")#
 draw.circle(3.9,2.1,radius=0.04,col="white")#
 draw.circle(4,2.3,radius=0.04,col="white")#
 draw.circle(4.07,2.55,radius=0.04,col="white")#
 draw.circle(4.03,2.85,radius=0.04,col="white")#
 text(c(1.7,3.1,4),c(3.7,3.7,3.7),c("Pass","Pass","Fail"))
plot(1:5,type="n",main="Floating Pie test",xlab="",ylab="",axes=FALSE)
box()
polygon(c(0,0,5.5,5.5),c(0,3,3,0),border="#44aaff",col="#44aaff")
floating.pie(1.7,3,c(2,4,4,2,8),radius=0.5,#
  col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))
df <- data.frame(#
	capture = c( "June-2014", "Aug-2014", "Oct-2014", "Dec-2014", "Feb-2015", "June-2015", #
	"Aug-2015", "Oct-2015"),#
	# number of strong positive adults#
	n_strong_SAT1 = c(26, 30, 30, 19, 20, 36, 39, 24, 33),#
	n_strong_SAT2 = c(31, 30, 30, 31, 19, 22, 39, 32, 33),#
	n_strong_SAT3 = c(31, 6, 11, 7, 18, 26, 23, 17),#
	# number of weak positive animals#
	n_weak_SAT1 = c(7, 5, 9, 7, 8, 6, 10, 4), #
	n_weak_SAT2 = c(2, 7, 7, 3, 3, 5, 7, 10), #
	n_weak_SAT3 = c(2, 6, 8, 5, 5, 11, 11, 11), #
	# number of test negative animals#
	n_neg_SAT1 = c(11, 11, 37, 5, 0, 8, 11, 10)#
	n_neg_SAT2 = c(11, 11, 8, 9, 3, 5, 7, 5),#
	n_neg_SAT3 = c(20, 36, 27, 19, 5, 13, 12, 19)#
	)
df <- data.frame(#
	capture = c( "June-2014", "Aug-2014", "Oct-2014", "Dec-2014", "Feb-2015", "June-2015", #
	"Aug-2015", "Oct-2015"),#
	# number of strong positive adults#
	n_strong_SAT1 = c(26, 30, 30, 19, 20, 36, 39, 24, 33),#
	n_strong_SAT2 = c(31, 30, 30, 31, 19, 22, 39, 32, 33),#
	n_strong_SAT3 = c(31, 6, 11, 7, 18, 26, 23, 17),#
	# number of weak positive animals#
	n_weak_SAT1 = c(7, 5, 9, 7, 8, 6, 10, 4), #
	n_weak_SAT2 = c(2, 7, 7, 3, 3, 5, 7, 10), #
	n_weak_SAT3 = c(2, 6, 8, 5, 5, 11, 11, 11), #
	# number of test negative animals#
	n_neg_SAT1 = c(11, 11, 37, 5, 0, 8, 11, 10),#
	n_neg_SAT2 = c(11, 11, 8, 9, 3, 5, 7, 5),#
	n_neg_SAT3 = c(20, 36, 27, 19, 5, 13, 12, 19)#
	)
df <- data.frame(#
	capture = c( "June-2014", "Aug-2014", "Oct-2014", "Dec-2014", "Feb-2015", "June-2015", "Aug-2015", "Oct-2015"),#
	# number of strong positive adults#
	n_strong_SAT1 = c(26, 30, 30, 19, 20, 36, 24, 33),#
	n_strong_SAT2 = c(31, 30, 31, 19, 22, 39, 32, 33),#
	n_strong_SAT3 = c(31, 6, 11, 7, 18, 26, 23, 17),#
	# number of weak positive animals#
	n_weak_SAT1 = c(7, 5, 9, 7, 8, 6, 10, 4), #
	n_weak_SAT2 = c(2, 7, 7, 3, 3, 5, 7, 10), #
	n_weak_SAT3 = c(2, 6, 8, 5, 5, 11, 11, 11), #
	# number of test negative animals#
	n_neg_SAT1 = c(11, 11, 37, 5, 0, 8, 11, 10),#
	n_neg_SAT2 = c(11, 11, 8, 9, 3, 5, 7, 5),#
	n_neg_SAT3 = c(20, 36, 27, 19, 5, 13, 12, 19)#
	)
df
df$p1<- NA; df$p2<-NA; df$p3<-NA
colnames(df)
for (i in 1:3){#
	df[,10+i] <- (df[,1+i]+df[,4+i])/(df[,i]+df[,4+i]+df[,7+i])#
}
str(df)
for (i in 1:3){#
	print(i)#
#	df[,10+i] <- (df[,c(1+i)]+df[,c(4+i)])/(df[,i]+df[,c(4+i)]+df[,c(7+i)])#
}
df$p1<- NA; df$p2<-NA; df$p3<-NA#
for (i in 1:3){#
	df[,10+i] <- (df[,c(1+i)]+df[,c(4+i)])/(df[,i]+df[,c(4+i)]+df[,c(7+i)])#
}
df[,1]
df[,2]
df[,1+1]
for (i in 1:3){#
print(2+i)#
#	df[,10+i] <- (df[,c(1+i)]+df[,c(4+i)])/(df[,i]+df[,c(4+i)]+df[,c(7+i)])#
}
str(df[,2])
num = seq(1,3)#
for (i in num){#
	df[,10+i] <- (df[,c(1+i)]+df[,c(4+i)])/(df[,i]+df[,c(4+i)]+df[,c(7+i)])#
}
head(df)
df$p1<- NA; df$p2<-NA; df$p3<-NA#
for (i in 1:3){#
	df[,10+i] <- (df[,c(1+i)]+df[,c(4+i)])/(df[,1+i]+df[,c(4+i)]+df[,c(7+i)])#
}
df
plot(p1, seq(1, 6, 1), ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex.axis=1.2, las=1, type="l", lty=1, lwd=1, tck= -0.025, bty="n")
plot(df$p1, seq(1, 8, 1), ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex.axis=1.2, las=1, cex= 0.8, type="l", lty=1, lwd=1, tck= -0.025, bty="n")#
lines(df$p2, seq(1, 8, 1), type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, seq(1, 8, 1), type="l", lwd=1, cex= 0.8, lty= 3)
lines(df$p2, seq(1, 8, 1), type="l", lwd=1, cex= 0.8, lty= 2)
lines(df$p2, seq(1,8,1))
seq(1, 8, 1)
length(df2$p2)
length(df$p2)
plot(df$p1, c(1,2,3,4,5,6,7,8))
str(seq(1,8,1))
plot(df$p1, seq(1, 8, 1), ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex.axis=1.2, las=1, cex= 0.8, type="l", lty=1, lwd=1, tck= -0.025, bty="n")#
lines(df$p2, seq(1, 8, 1), type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, seq(1, 8, 1), type="l", lwd=1, cex= 0.8, lty= 3)
plot(df$p1)
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex.axis=1.2, las=1, cex= 0.8, type="l", lty=1, lwd=1, tck= -0.025, bty="n")
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n")
?par
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex.axis=1.2, las=1, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axis= FALSE)
?plot
plot(df$p1, df$capture, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex.axis=1.2, las=1, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n")
?axis
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, las=1, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels=df$capture)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(df$capture[1], "", "df$capture[3]", "", "df$capture[5]", "", "df$capture[7]", "")#
axis(2, at=c(0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(df$capture[1], "", "df$capture[3]", "", "df$capture[5]", "", "df$capture[7]", "") )#
axis(2, at=c(0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)
?paste
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)
points(df$p1, pch=19)#
points(df$p2, pch=17)#
points(df$p3, pch=15)
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.3, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0, 0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)#
points(df$p1, pch=19)#
points(df$p2, pch=17)#
points(df$p3, pch=15)
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.2, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0, 0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)#
points(df$p1, pch=19)#
points(df$p2, pch=17)#
points(df$p3, pch=15)
?floating.pie
yindex= seq(1,8,1)
yindex= seq(1,8,1)#
for(i in 1:length(df$p1)){#
	floating.pie(xpos = df$p1[i], ypos = yindex[i], c(df$n_strong_SAT1[i], #
	df$n_weak_SAT1[i], df$n_neg_SAT1[i]), col=c("steelblue2", "steelblue3", "steelblue4"))#
}
?floating.pie
yindex= seq(1,8,1)#
for(i in 1:length(df$p1)){#
	floating.pie(xpos = df$p1[i], ypos = yindex[i], c(df$n_strong_SAT1[i], #
	df$n_weak_SAT1[i], df$n_neg_SAT1[i]), radius=0.3, col=c("steelblue2", "steelblue3", "steelblue4"))#
}
yindex
?floating.pie
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.2, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0, 0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)#
# add pie graphs:#
yindex= seq(1,8,1)#
for(i in 1:length(df$p1)){#
	floating.pie(xpos = df$p1[i], ypos = yindex[i], x= c(df$n_strong_SAT1[i], #
	df$n_weak_SAT1[i], df$n_neg_SAT1[i]), radius=0.3, #
	col=c("steelblue2", "steelblue3", "steelblue4"))#
}
df$p1
?floating.pie
plot(1:5,type="n",main="Floating Pie test",xlab="",ylab="",axes=FALSE)#
 box()#
 polygon(c(0,0,5.5,5.5),c(0,3,3,0),border="#44aaff",col="#44aaff")#
 floating.pie(1.7,3,c(2,4,4,2,8),radius=0.5,#
  col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))
plot(df$p1, ylim=c(0,1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.2, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0, 0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)#
# add pie graphs:#
yindex= seq(1,8,1)
for(i in 1:length(df$p1)){#
	floating.pie(ypos = df$p1[i], xpos = yindex[i], x= c(df$n_strong_SAT1[i], #
	df$n_weak_SAT1[i], df$n_neg_SAT1[i]), radius=0.3, #
	col=c("steelblue2", "steelblue3", "steelblue4"))#
}
plot(df$p1, ylim=c(0,1.1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.2, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0, 0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)#
# add pie graphs:#
yindex= seq(1,8,1)#
for(i in 1:length(df$p1)){#
	floating.pie(ypos = df$p1[i], xpos = yindex[i], x= c(df$n_strong_SAT1[i], #
	df$n_weak_SAT1[i], df$n_neg_SAT1[i]), radius=0.3, #
	col=c("steelblue2", "steelblue3", "steelblue4"))
floating.pie(ypos = df$p2[i], xpos = yindex[i], c(df$n_strong_SAT2[i], #
	df$n_weak_SAT2[i], df$n_neg_SAT2[i]), radius=0.3, #
	col=c("slateblue1", "slateblue2", "slateblue3"))#
#
	floating.pie(ypos = df$p3[i], xpos = yindex[i], c(df$n_strong_SAT3[i], #
	df$n_weak_SAT3[i], df$n_neg_SAT3[i]), radius=0.3, #
	col=c("brown1", "brown3", "brown4"))#
}
?par
par(mar=c(5, 4, 4, 3))#
plot(df$p1, ylim=c(0,1.1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.2, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0, 0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)#
# add pie graphs:#
yindex= seq(1,8,1)#
for(i in 1:length(df$p1)){#
	floating.pie(ypos = df$p1[i], xpos = yindex[i], x= c(df$n_strong_SAT1[i], #
	df$n_weak_SAT1[i], df$n_neg_SAT1[i]), radius=0.2, #
	col=c("steelblue2", "steelblue3", "steelblue4"))#
#
	floating.pie(ypos = df$p2[i], xpos = yindex[i], c(df$n_strong_SAT2[i], #
	df$n_weak_SAT2[i], df$n_neg_SAT2[i]), radius=0.2, #
	col=c("slateblue1", "slateblue3", "slateblue4"))#
#
	floating.pie(ypos = df$p3[i], xpos = yindex[i], c(df$n_strong_SAT3[i], #
	df$n_weak_SAT3[i], df$n_neg_SAT3[i]), radius=0.2, #
	col=c("brown1", "brown3", "brown4"))#
}
par(mar=c(5, 4, 4, 3))#
plot(df$p1, ylim=c(0,1.1), xlab="", ylab="FMDV seroprevalence", #
	cex.lab=1.2, cex= 0.8, type="l", lty=1, #
	lwd=1, tck= -0.025, bty="n", axes=F)#
axis(1, at=c(1,2,3,4,5,6,7,8), tck=-0.025, cex.axis=1.2, labels= c(paste(df$capture[1]), "", paste(df$capture[3]), "", paste(df$capture[5]), "", paste(df$capture[7]), "") )#
axis(2, at=c(0, 0.2, 0.4, 0.6, 0.8, 1), tck=-0.025, cex.axis=1.2, las=1)#
lines(df$p2, type="l", lwd=1, cex= 0.8, lty= 2)#
lines(df$p3, type="l", lwd=1, cex= 0.8, lty= 3)#
legend("bottomright", c("SAT 1", "SAT 2", "SAT 3"), lty=c(1, 2, 3), lwd=1, bty="n", cex=1.2)#
# add pie graphs:#
yindex= seq(1,8,1)#
for(i in 1:length(df$p1)){#
	floating.pie(ypos = df$p1[i], xpos = yindex[i], x= c(df$n_strong_SAT1[i], #
	df$n_weak_SAT1[i], df$n_neg_SAT1[i]), radius=0.2, #
	col=c("steelblue4", "steelblue2", "skyblue1"))#
#
	floating.pie(ypos = df$p2[i], xpos = yindex[i], c(df$n_strong_SAT2[i], #
	df$n_weak_SAT2[i], df$n_neg_SAT2[i]), radius=0.2, #
	col=c("slateblue4", "slateblue3", "slateblue1"))#
#
	floating.pie(ypos = df$p3[i], xpos = yindex[i], c(df$n_strong_SAT3[i], #
	df$n_weak_SAT3[i], df$n_neg_SAT3[i]), radius=0.2, #
	col=c("brown4", "brown3", "brown1"))#
}
0.001/127
0.001/4
0.001/80
deaths <- ts(c(11.5, 26.5, 40.5, 41.5, 25, 11, 11.5, 10.5),#
             start = c(1666, 13), end = c(1666, 20),#
             freq = 24)
str(deaths)
head(deaths)
plot(deaths)
cumsum(deaths)
library(desolve)
library(deSolve)
Y0 <- c(S = S0, I = I0, R = R0)#
times <- seq(0, 100, length.out = 1001)  # days, please!#
b <- 1 / 11   # per day!#
a <- b / 159  # per day!#
params <- c(a = a, b = b)#
# so can call #
params[a]
head(Y)
head(Y0)
Y0 <- c(S = S0, I = I0, R = R0)
# NOT On July 3/4#
S0 <- 254#
I0 <- 7#
R0 <- 0#
#
# NOTES: #
?ode() # difeq solver.  requires y= initial conditions; times= time sequence of outbreaks;  function= function defining differential equations with inputs function(t, y, params).  Note function must return a list of the differences with repect to time.#
#
# Set parts required for solver: #
Y0 <- c(S = S0, I = I0, R = R0)
head(Y0)
rhs <- function(t, Y, params) {#
    with(as.list(c(Y, params)), {  # the with statement allows you to reference the parts of params and Y #
        dSdt <- - a * S* I#
        dIdt <- a * S * I - b * I#
        dRdt <- b * I#
        dYdt <- list(c(S = dSdt, I = dIdt, R = dRdt))#
    return(dYdt)#
    })#
}
sol <- ode(Y0, times, rhs, params)
head(sol)
plot(sol[, 'time'], sol[, 'S'], type = 'l', col = 2,#
     ylim = c(0, 300),#
     xlab = 'time (days)', ylab = 'number of people')#
lines(sol[, 'time'], sol[, 'I'], col = 3)#
lines(sol[, 'time'], sol[, 'R'], col = 4)#
legend('topright', c('S', 'I', 'R'), lty = 1, col = 2 : 4, bty = 'n')
?ode
plot(sol[, 'time'], sol[, 'S'], type = 'l', col = 2,#
     ylim = c(0, 300),#
     xlab = 'time (days)', ylab = 'number of people')#
lines(sol[, 'time'], sol[, 'I'], col = 3)#
lines(sol[, 'time'], sol[, 'R'], col = 4)#
legend('topright', c('S', 'I', 'R'), lty = 1, col = 2 : 4, bty = 'n')#
# plot data overtop#
t<- seq(15.5, 124, by = 15.5)#
points(t, cumsum(deaths))
sol
t
Ri <- sol[sol['time'] %in% t, 'R']
Ri
times <- seq(0, 200, by= 0.1)  # days, please!
Ri <- sol[sol[,'time'] %in% t, 'R']#
error <- sqrt(sum(cumdeaths- Ri)^2)
error <- sqrt(sum(cumsum(deaths)- Ri)^2)
cumdeaths<- cumsum(deaths)
error <- sqrt(sum(cumdeaths- Ri)^2)
Ri
cumdeaths
error <- sqrt(sum(cumdeaths- Ri)^2)
length(sol)
length(Ri)
length(cumdeaths)
times
t
length(t)
length(Ri)
deaths <- ts(c(11.5, 26.5, 40.5, 41.5, 25, 11, 11.5, 10.5),#
             start = c(1666, 13), end = c(1666, 20),#
             freq = 24)#
#
# note cumsum(deaths) = R at a given time.  #
cumsum(deaths) # gives table 1#
#
# Set Initial conditions- using first row in the table 2#
# NOT On July 3/4#
S0 <- 254#
I0 <- 7#
R0 <- 0
# Set parts required for solver: #
Y0 <- c(S = S0, I = I0, R = R0)#
times <- seq(0, 200, by= 0.1)  # days, please!#
b <- 1 / 11   # per day!#
a <- b / 159  # per day!#
params <- c(a = a, b = b)#
# so can call #
params['a']#
params[1]#
#
rhs <- function(t, Y, params) {#
    with(as.list(c(Y, params)), {  # the with statement allows you to reference the parts of params and Y #
        dSdt <- - a * S* I#
        dIdt <- a * S * I - b * I#
        dRdt <- b * I#
        dYdt <- list(c(S = dSdt, I = dIdt, R = dRdt))#
    return(dYdt)#
    })#
}
sol <- ode(Y0, times, rhs, params)
plot(sol[, 'time'], sol[, 'S'], type = 'l', col = 2,#
     ylim = c(0, 300),#
     xlab = 'time (days)', ylab = 'number of people')#
lines(sol[, 'time'], sol[, 'I'], col = 3)#
lines(sol[, 'time'], sol[, 'R'], col = 4)#
legend('topright', c('S', 'I', 'R'), lty = 1, col = 2 : 4, bty = 'n')#
# plot data overtop#
t<- seq(15.5, 124, by = 15.5)#
points(t, cumsum(deaths))#
cumdeaths<- cumsum(deaths)#
#
# Raggett uses RMS error = sqrt(sum((data_i - R_i)^2))#
# want vertical distance at each point, data occur every 15.5 days... #
Ri <- sol[sol[,'time'] %in% t, 'R']#
error <- sqrt(sum(cumdeaths- Ri)^2)
error
setwd("~/Documents/Classes/TheoryClass2/lab 2")#
#
data <- read.csv('crouse.csv', row.names = 1)#
#
nstages <- nrow(data)#
stagenames <- rownames(data)#
#
d <- data$duration#
p <- data$annual.survivorship#
#
F <- data$fecundity#
#
# probability of surviving to the beginning of the stage. #
stage_survival<-c(1, 1*p[1]^d[1], 1*p[1]^d[1] * p[2]*d[2])#
#
# note p^d is the probability of surviving to each stage.  stage_survival is their cummunlative product. #
stage_survival<-c(1, cumprod(p^d))#
#
# note also that everyone should die in the last stage, so drop the last one#
stage_survival<-c(1, cumprod(p^d))[-(nstages+1)]#
names(stage_survival)<-stagenames#
plot(stage_survival, type="b", ylab="Prob surviving to start of each stage", xlab="Life Stage")#
plot(stage_survival, type="b", log="y", #
     ylab="Log Prob surviving to start of each stage", xlab="Life Stage")#
#
# could also see annual survival prob for start of each year#
cumulative_yearly_survival<- c(1, cumprod(rep(p, d)))[-(length(cumprod(rep(p,d))+1))]#
plot(cumulative_yearly_survival); #
plot(log(cumulative_yearly_survival))#
#
getPG <- function(d, p) {#
    # Eqs (1) and (2).#
    # P= probability surviving and remaining in same stage and surviving#
    P <- (1 - p^(d - 1)) / (1 - p^d) * p#
    # G= probability surviving and remaining in the same stage (prop oldest group)#
    G <- p^d * (1-p) /(1 - p^d)#
#
    return(list(P = P, G = G))#
}#
getA <- function(P, G, F) {#
    A <- matrix(0, ncol = nstages, nrow = nstages,#
                dimnames = list(stagenames, stagenames))#
#
    A[1, ] <- F#
    for(i in seq(1, nstages)){#
        A[i,i] <- A[i,i] + P[i]#
        if (i>1){#
            A[i, i-1] <-G[i-1]#
        }#
    }#
    return(A)#
}#
PG <- getPG(d, p)#
A <- getA(PG$P, PG$G, F)#
# New population with 10000 eggs.#
n <- vector(length = nstages)#
names(n) <- stagenames#
n[1] <- 100000#
#
tmax <- 50#
T <- 0 : tmax#
#
# Empty data structure to hold results.  #
# Rows=population size per stage at a given time; columns= stages#
N <- matrix(ncol = nstages, nrow = tmax + 1)#
colnames(N) <- stagenames#
rownames(N) <- T#
#
N[1, ] <- n#
for (t in 1 : tmax) {#
    # %*% is matrix multiply.#
    N[t+1,] <- A %*% N[t,]#
}#
#
# note slopes are the same, because over time reaches stable age structure,#
# so all decreasing at exp(slope)= lambda; in long time.#
plot(T, rowSums(N), type = "b", col = 1, pch = 0, log = "y",#
     ylim = c(1, max(N)),#
     xlab = "Time (years)", ylab = "Number")#
for (i in 1 : nstages) {#
    lines(T, N[, i], type = "b", col = i + 1, pch = i)#
}#
legend("topright", c("total", stagenames), bty = "n",#
       col = 1 : (nstages + 1), pch = 0 : nstages,#
       ncol = 2)#
geteigenstuff <- function(A) {#
    ev <- eigen(A)#
    # Find the largest in magnitude#
    i <- which.max(abs(ev$values))#
    # Perron-Frobenius tells us it's real!#
    lambdam <- Re(ev$values[i])#
#
    # Perron-Frob tells us it's real!#
    w <- Re(ev$vectors[, i])#
    # Normalize it sum to 1.#
    stable.stage.dist <- w / sum(w)#
    names(stable.stage.dist) <- stagenames#
#
    ev <- eigen(t(A))#
    # Find the largest in magnitude#
    i <- which.max(abs(ev$values))#
    # Perron-Frob tells us it's real! Re gets the real =, non, complex parts#
    v <- Re(ev$vectors[, i])#
    # Normalize it so the first element is 1.  Note this is the stable stage distribution. #
    reproductive.value <- v / v[1]#
    names(reproductive.value) <- colnames(A)#
#
    return(list(lambdam = lambdam,#
                stable.stage.dist = stable.stage.dist,#
                reproductive.value = reproductive.value))#
}#
eigenstuff <- geteigenstuff(A)#
lambdam <- eigenstuff$lambdam#
#
# table 5#
w <- eigenstuff$stable.stage.dist#
# table - interpret this as, in the long time, #
# 1.4 eggs is equivalent to starting with 1 small juvenile in the long term population growth#
# 5.9 eggs is equivalent to strting with 1 juveniles#
v <- eigenstuff$reproductive.value#
#
# lambda is multiplicative increase in population size. e^rt = lambda n; if r>0 grow, r<0 decline#
r <- log(lambdam)#
###########################################
# Make plot of Pi for any stage and lambda values#
###########################################
getlambdam = function(Pi, i){#
    # generate a list #
    PG <- getPG(d, p)#
    PG$P[i] <- Pi#
    A <- getA(PG$P, PG$G, F)#
    ev <- geteigenstuff(A)#
    return(ev$lambdam)#
}#
Pi <- seq(0, 1, by=0.01)#
Lambdam <- matrix(0, nrow=nstages, ncol=length(Pi))#
#
for (i in 1:nstages){#
    for (j in 1:length(Pi)){#
        Lambdam[i,j]<- getlambdam(Pi[j], i)#
    }#
}#
#
# make plot#
plot(Pi, Lambdam[1, ], type='l', col='2', ylim=c(min(Lambdam), max(Lambdam)), #
     xlab= expression(P[i]), #
     ylab= expression(lambda[m]))#
for (i in 2:nstages){#
    lines(Pi, Lambdam[i,], col= (i+1))#
}#
legend("topleft", stagenames, bty='n',#
       col=2:(nstages+1), lty=1, cex=0.6)#
#
# where population starts to replace itself#
lines(c(0,1), c(1,1), lty=3)#
# where #
lines(c(0,1), c(lambdam, lambdam), lty=2)#
#
# can see have to do less work to get blue/green life stages up to replacing itself#
#
# they used sensitivity= slope  of lambda m to Pi near the point where we are now. #
# This plot tells you more#
#
# approximation of sensitivity: #
step=0.01#
lambdam1<- getlambdam(PG$P[3] + step, 3)#
sens3<-(lambdam1-lambdam)/step#
#
# elasticity = sensitivity/base value lambdam * Base value p3#
# sensitivity is an additive thing; elasticity=proportional change#
##sens= (so on unit change in p3 is associated with a xx unit change to lambdam)#
#
##################################################
##################################################
##################################################
# HWK: #
getlambdam_G = function(Gi, i){#
    # generate a list #
    PG <- getPG(d, p)#
    PG$G[i] <- Gi#
    A <- getA(PG$P, PG$G, F)#
    ev <- geteigenstuff(A)#
    return(ev$lambdam)#
}#
#
getlambdam_F = function(Fi, i){#
    # generate a list #
    PG <- getPG(d, p)#
    F1 <- F#
    F1[i] <- Fi#
    A <- getA(PG$P, PG$G, F1)#
    ev <- geteigenstuff(A)#
    return(ev$lambdam)#
}#
#
elast_P = NA; elast_G = NA; elast_F = NA#
#
# just in case we overwrote something in class#
PG <- getPG(d, p)#
A <- getA(PG$P, PG$G, F)#
eigenstuff <- geteigenstuff(A)#
lambda0 <- eigenstuff$lambdam#
#
for (i in 1:nstages){#
    elast_P[i] <- ((getlambdam(PG$P[i] + step, i) - lambda0)/lambda0) /  (step/ PG$P[i])#
    elast_G[i] <- ((getlambdam_G(PG$G[i] + step, i) - lambda0)/lambda0) /  (step/ PG$G[i])#
    elast_F[i] <- ((getlambdam_F(F[i] + step, i) - lambda0)/lambda0) /  (step/ F[i])#
}#
#
# plot#
plot(y = elast_P, x = seq(1,nstages), type= 'b', pch= 2, xlab="Stage", ylab="Elasticity", bty="l", ylim=c(0, 0.25))#
points(y = elast_G, x = seq(1,nstages), type= 'b', pch= 0)#
points(y= elast_F[1:3], x= seq(1,3), pch=1)#
points(y = elast_F[4:7], x = seq(4:7)+3, type= 'b', pch= 1)#
text(3.6, 0.17, 'Pi')#
text(3.6, 0.07, 'Gi')#
text(3.6, 0.02, 'Fi')
objective <- function(params){#
	sol <- ode(Y0, times, rhs, params)#
	Ri <- sol[sol[,'time'] %in% t, 'R']#
	error <- sqrt(sum(cumdeaths - Ri)^2)#
}
params
?optim
objective2 <- function(b){#
	a <- b / 159#
	params <- c(a= a, b= b)#
return(objective(params))}
bvals <- seq(0.5, 2, by =0.1)
bvals <- seq(0.05, 0.02, by =0.001)#
#
for (b in bvals){#
	error <- c(errors, objective2(b))#
}
for (b in bvals){#
	error <- c(error, objective2(b))#
}
plot(bvals, error)
error
length(bvals)
length(error)
bvals <- seq(0.05, 0.02, by =0.001)#
error<-c()#
for (b in bvals){#
	error <- c(error, objective2(b))#
}
bvals <- seq(0.05, 0.02, by=0.001)
bvals <- seq(0.05, 0.2, by=0.001)
bvals <- seq(0.05, 0.2, by=0.01)
error<-c()#
for (b in bvals){#
	error <- c(error, objective2(b))#
}
plot(bvals, error)
optim(1/11, objective2, method='Brent')
optim(1/11, objective2, method='Brent', lower=0.05, upper=0.2)
cumdeaths
optim(c(0.2, 1/11), objective)
optim(c(a= 1/11/159, b= 1/11), objective)
res$par['b']/res$par['a']
res <- optim(c(a= 1/11/159, b= 1/11), objective)
res$par['b']/res$par['a']
res$par
res$par['a']
I have come across at least three way to make 3D plots in R.  The quickest is with persp() in the graphics package.  My favorite is the plot3d() and surface3d() functions from the plot3d package.  The final option is with ggplots.  #
Graphics package 3d plots can get you something like this image:#
# #
install.packages("plot3D"); install.packages("rgl")#
library("plot3D")#
library("rgl")#
# Attempt using persp command#
p<-seq(0,0.5, 0.02)#
#
xval= seq(0, 0.5, 0.02)  # length=26#
yval<-seq(2.5,3.5,0.1)     # 21 options#
Zf<-function(X, Y){#
	population(p=X, condition=Y, herd=0)#
}#
z<-matrix(NA, nrow=length(xval), ncol=length(yval))#
for (i in 1:length(xval)){#
	temp_prev=xval[i]#
	for (j in 1:length(yval)){#
		temp_cond=yval[j]#
		z[i,j]<-Zf(X=temp_prev, Y=temp_cond)#
	}	#
}#
#
nrz<-nrow(z)#
ncz<-ncol(z)#
jet.colors<-colorRampPalette(c("white", "black"))#
nbcol<-100#
color<-jet.colors(nbcol)#
zfacet<-z[-1,-1]+z[-1, ncz]+z[-nrz, -1]+z[-nrz, -ncz]#
facetcol<-cut(zfacet, nbcol)#
#
persp(x=xval, y=yval, z=z, theta=-40, col=color[facetcol],axes=TRUE, ticktype="detailed", tck=0.01, xlab="Brucellosis prevalence", ylab="Body condition score", zlab="")   # theta=x, degree to move the viewing angle left/right.  use phi to move up/down#
#axes3d("x", labels=TRUE)
### Lower Sabie, average condition: #
population<-function(p){#
surv_zero <-(0.2428*p*0.74) + (1- 0.2428*p)*0.74#
surv_one <- (0.2428*p*0.7834) + (1 - 0.2428*p)*0.95#
surv_two <-(0.7572*p*0.7834) + (1 - 0.7572*p)*0.95#
surv_three <- (0.7572*p*0.7834) + (1 - 0.7572*p)*0.95#
surv_four<- (0.87868*p*0.7834)+ (1- 0.7572*p)*0.95#
surv_five <- (0.87868*p*0.7834) + (1 - 0.87868*p)*0.95#
surv_six <- (1.6251*p* 0.7834) + (1 - 1.6251*p)*0.95#
surv_seven <- (1.6251*p*0.7834) + (1 - 1.6251*p)*0.95#
surv_eight <- (1.6251*p* 0.7834) + (1 - 1.6251*p)*0.95#
surv_nine <- (1.3005*p*0.40) + (1 - 1.3005*p)*0.86#
surv_ten <- (1.3005*p*0.40) + (1 - 1.3005*p)*0.86#
surv_eleven  <- (1.3005*p*0.40) + (1 - 1.3005*p)*0.86#
surv_twelve  <- (1.3005*p*0.40) + (1 - 1.3005*p)*0.86#
surv_thirteen  <- (1.3005*p*0.40) + (1 - 1.3005*p)*0.86#
surv_fourteen  <- (1.3005*p*0.40) + (1 - 1.3005*p)*0.86#
surv_fifteen <- (1.3005*p*0) + (1 - 1.3005*p)*0.73#
surv_sixteen <- (1.3005*p*0) + (1 - 1.3005*p)*0.73#
surv_seventeen <- (1.3005*p*0) + (1 - 1.3005*p)*0.73#
surv_eighteen <- (1.3005*p*0) + (1 - 1.3005*p)*0.73#
fec_zero <-0#
fec_one <-0#
fec_two <-0#
fec_three <- (0.7572*p*0.45)+ (1-0.7572*p)*0.51#
fec_four <-(0.87868*p*0.59) + (1 - 0.87868*p)*0.64 #
fec_five <-(0.87868*p*0.59) + (1 - 0.87868*p)*0.64 #
fec_six <-(1.6251*p*0.55) + (1 - 1.6251*p)*0.60#
fec_seven <-(1.6251*p*0.55) + (1 - 1.6251*p)*0.60#
fec_eight <-(1.6251*p*0.55) + (1 - 1.6251*p)*0.60 #
fec_nine <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60#
fec_ten <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60#
fec_eleven <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60#
fec_twelve <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60#
fec_thirteen <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60#
fec_fourteen <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60 #
fec_fifteen <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60#
fec_sixteen <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60 #
fec_seventeen <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60#
fec_eighteen<-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60 #
fec_nineteen <-(1.3005*p*0.55) + (1 - 1.3005*p)*0.60 #
popgrowth <-matrix(c(fec_zero, fec_one, fec_two, fec_three, fec_four, fec_five, fec_six, fec_seven, fec_eight, fec_nine, fec_ten, fec_eleven, fec_twelve, fec_thirteen, fec_fourteen, fec_fifteen, fec_sixteen, fec_seventeen, fec_eighteen, fec_nineteen,#
	surv_zero, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, surv_one, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,#
	0, 0, surv_two,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, surv_three, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, surv_four, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, surv_five, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, surv_six, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, surv_seven, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, surv_eight, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,#
	0, 0, 0, 0, 0, 0, 0, 0, 0, surv_nine, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_ten, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_eleven, 0, 0, 0, 0, 0, 0, 0, 0,#
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  surv_twelve, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_thirteen, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_fourteen, 0, 0, 0, 0, 0, #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_fifteen, 0, 0, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_sixteen, 0, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_seventeen, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_eighteen, 0), nrow=20, ncol=20, byrow=TRUE)#
eigenvalues<-eigen(popgrowth)$values#
max(Re(eigenvalues[abs(Im(eigenvalues)) < 1e-6]))#
}
I have come across at least three way to make 3D plots in R.  The quickest is with persp() in the graphics package.  My favorite is the plot3d() and surface3d() functions from the plot3d package.  The final option is with ggplots.  #
Graphics package 3d plots can get you something like this image:#
# #
install.packages("plot3D"); install.packages("rgl")#
library("plot3D")#
library("rgl")#
# Attempt using persp command#
p<-seq(0,0.5, 0.02)#
#
xval= seq(0, 0.5, 0.02)  # length=26#
yval<-seq(2.5,3.5,0.1)     # 21 options#
Zf<-function(X, Y){#
	population(p=X, condition=Y, herd=0)#
}#
z<-matrix(NA, nrow=length(xval), ncol=length(yval))#
for (i in 1:length(xval)){#
	temp_prev=xval[i]#
	for (j in 1:length(yval)){#
		temp_cond=yval[j]#
		z[i,j]<-Zf(X=temp_prev, Y=temp_cond)#
	}	#
}#
#
nrz<-nrow(z)#
ncz<-ncol(z)#
jet.colors<-colorRampPalette(c("white", "black"))#
nbcol<-100#
color<-jet.colors(nbcol)#
zfacet<-z[-1,-1]+z[-1, ncz]+z[-nrz, -1]+z[-nrz, -ncz]#
facetcol<-cut(zfacet, nbcol)#
#
persp(x=xval, y=yval, z=z, theta=-40, col=color[facetcol],axes=TRUE, ticktype="detailed", tck=0.01, xlab="Brucellosis prevalence", ylab="Body condition score", zlab="")   # theta=x, degree to move the viewing angle left/right.  use phi to move up/down#
#axes3d("x", labels=TRUE)
setwd("~/buffalo/results_loopNcv")#
temp<-list.files(pattern="*.csv")#
myfiles = lapply(temp, read.csv)#
nreps= 4#
#
# each read in dataframe contains a parameter combination#
# with nreps replicates (4)#
nomean<-list(NA)#
for (i in 1:length(myfiles)){#
	temp<-myfiles[[i]]#
	temp2<-temp[temp$Rep!="mean",]#
	nomean[[i]]<-temp2#
	rm(temp, temp2)#
}#
#
# make long format dataframe to read into lattice#
# for each parameter combination, want probability of extinction within 10 years. (proportion of reps die out)#
data<- data.frame(N= rep(seq(25, 1000,25), length(seq(0.6, 1.2, 0.2))), #
	cv= rep(seq(0.6, 1.2, 0.2), each=length(seq(25, 1000,25) )), #
	n_reps=NA, Etime_med=NA, Etime_max=NA, pr_e=NA)#
#
get_time = function(d){#
	temp <- ddply(d, .(Rep), summarize, Etime=max(X))#
	ifelse(length(temp$Etime[temp$Etime>0.5])>0, #
		prop<-length(temp$Etime[temp$Etime>0.5])/length(temp$Etime), prop<-0)#
	vals<- c(length(temp[,1]), median(temp$Etime), max(temp$Etime), prop)#
	return(vals)#
}#
#
for (i in 1:length(temp)){#
	nval<- strsplit(strsplit(temp[[i]], "_")[[1]][4], "[.]")[[1]][1]#
	cv<-strsplit(temp[[i]], "_")[[1]][3]#
	vals<-get_time(nomean[[i]])#
	data$n_reps[data$N==nval & data$cv==as.numeric(cv)]<-vals[1]#
	data$Etime_med[data$N==nval & data$cv== as.numeric(cv)]<- vals[2]#
	data$Etime_max[data$N==nval & data$cv==as.numeric(cv)]<- vals[3]#
	data$pr_e[data$N==nval & data$cv==as.numeric(cv)]<- vals[4]#
	rm(nval, cv, vals)#
}#
#
cols <- colorRampPalette(brewer.pal(9, "Greens"))(100)   # colors for level plots#
#levelplot(Ieq ~ pi * rho, data = epi, col.regions = cols, main = "Number infected")#
#
levelplot(pr_e ~ N * cv, data = data, col.regions = cols, main = "Proportion of simulations allowing persistence (>0.5yr)")
library(foreach)#
library(doParallel)#
library(VGAM)#
library(igraph)#
library(plyr)#
library(lattice)#
library(RColorBrewer)#
library(deSolve)
setwd("~/Documents/post-doc/general network literature/code/edgelists_to_simulate")
setwd("~/buffalo/results_loopNcv")#
temp<-list.files(pattern="*.csv")#
myfiles = lapply(temp, read.csv)#
nreps= 4#
#
# each read in dataframe contains a parameter combination#
# with nreps replicates (4)#
nomean<-list(NA)#
for (i in 1:length(myfiles)){#
	temp<-myfiles[[i]]#
	temp2<-temp[temp$Rep!="mean",]#
	nomean[[i]]<-temp2#
	rm(temp, temp2)#
}#
#
# make long format dataframe to read into lattice#
# for each parameter combination, want probability of extinction within 10 years. (proportion of reps die out)#
data<- data.frame(N= rep(seq(25, 1000,25), length(seq(0.6, 1.2, 0.2))), #
	cv= rep(seq(0.6, 1.2, 0.2), each=length(seq(25, 1000,25) )), #
	n_reps=NA, Etime_med=NA, Etime_max=NA, pr_e=NA)#
#
get_time = function(d){#
	temp <- ddply(d, .(Rep), summarize, Etime=max(X))#
	ifelse(length(temp$Etime[temp$Etime>0.5])>0, #
		prop<-length(temp$Etime[temp$Etime>0.5])/length(temp$Etime), prop<-0)#
	vals<- c(length(temp[,1]), median(temp$Etime), max(temp$Etime), prop)#
	return(vals)#
}#
#
for (i in 1:length(temp)){#
	nval<- strsplit(strsplit(temp[[i]], "_")[[1]][4], "[.]")[[1]][1]#
	cv<-strsplit(temp[[i]], "_")[[1]][3]#
	vals<-get_time(nomean[[i]])#
	data$n_reps[data$N==nval & data$cv==as.numeric(cv)]<-vals[1]#
	data$Etime_med[data$N==nval & data$cv== as.numeric(cv)]<- vals[2]#
	data$Etime_max[data$N==nval & data$cv==as.numeric(cv)]<- vals[3]#
	data$pr_e[data$N==nval & data$cv==as.numeric(cv)]<- vals[4]#
	rm(nval, cv, vals)#
}#
#
cols <- colorRampPalette(brewer.pal(9, "Greens"))(100)   # colors for level plots#
#levelplot(Ieq ~ pi * rho, data = epi, col.regions = cols, main = "Number infected")#
#
levelplot(pr_e ~ N * cv, data = data, col.regions = cols, main = "Proportion of simulations allowing persistence (>0.5yr)")
setwd("~/buffalo/results_loopNcv")#
temp<-list.files(pattern="*.csv")#
myfiles = lapply(temp, read.csv)#
nreps= 4#
#
# each read in dataframe contains a param
myfiles
# with nreps replicates (4)#
nomean<-list(NA)#
for (i in 1:length(myfiles)){#
	temp<-myfiles[[i]]#
	temp2<-temp[temp$Rep!="mean",]#
	nomean[[i]]<-temp2#
	rm(temp, temp2)#
}#
#
# make long format dataframe to read into lattice#
# for each parameter combination, want probability of extinction within 10 years. (proportion of reps die out)#
data<- data.frame(N= rep(seq(25, 1000,25), length(seq(0.6, 1.2, 0.2))), #
	cv= rep(seq(0.6, 1.2, 0.2), each=length(seq(25, 1000,25) )), #
	n_reps=NA, Etime_med=NA, Etime_max=NA, pr_e=NA)#
#
get_time = function(d){#
	temp <- ddply(d, .(Rep), summarize, Etime=max(X))#
	ifelse(length(temp$Etime[temp$Etime>0.5])>0, #
		prop<-length(temp$Etime[temp$Etime>0.5])/length(temp$Etime), prop<-0)#
	vals<- c(length(temp[,1]), median(temp$Etime), max(temp$Etime), prop)#
	return(vals)#
}#
#
for (i in 1:length(temp)){#
	nval<- strsplit(strsplit(temp[[i]], "_")[[1]][4], "[.]")[[1]][1]#
	cv<-strsplit(temp[[i]], "_")[[1]][3]#
	vals<-get_time(nomean[[i]])#
	data$n_reps[data$N==nval & data$cv==as.numeric(cv)]<-vals[1]#
	data$Etime_med[data$N==nval & data$cv== as.numeric(cv)]<- vals[2]#
	data$Etime_max[data$N==nval & data$cv==as.numeric(cv)]<- vals[3]#
	data$pr_e[data$N==nval & data$cv==as.numeric(cv)]<- vals[4]#
	rm(nval, cv, vals)#
}#
#
cols <- colorRampPalette(brewer.pal(9, "Greens"))(100)   # colors for level plots#
#levelplot(Ieq ~ pi * rho, data = epi, col.regions = cols, main = "Number infected")#
#
levelplot(pr_e ~ N * cv, data = data, col.regions = cols, main = "Proportion of simulations allowing persistence (>0.5yr)")
temp
setwd("~/buffalo/results_loopNcv")#
temp<-list.files(pattern="*.csv")
temp
myfiles = lapply(temp, read.csv)#
nreps= 4#
#
# each read in dataframe contains a parameter combination#
# with nreps replicates (4)#
nomean<-list(NA)#
for (i in 1:length(myfiles)){#
	temp<-myfiles[[i]]#
	temp2<-temp[temp$Rep!="mean",]#
	nomean[[i]]<-temp2#
	rm(temp, temp2)#
}
data<- data.frame(N= rep(seq(25, 1000,25), length(seq(0.6, 1.2, 0.2))), #
	cv= rep(seq(0.6, 1.2, 0.2), each=length(seq(25, 1000,25) )), #
	n_reps=NA, Etime_med=NA, Etime_max=NA, pr_e=NA)#
#
get_time = function(d){#
	temp <- ddply(d, .(Rep), summarize, Etime=max(X))#
	ifelse(length(temp$Etime[temp$Etime>0.5])>0, #
		prop<-length(temp$Etime[temp$Etime>0.5])/length(temp$Etime), prop<-0)#
	vals<- c(length(temp[,1]), median(temp$Etime), max(temp$Etime), prop)#
	return(vals)#
}#
#
for (i in 1:length(temp)){#
	nval<- strsplit(strsplit(temp[[i]], "_")[[1]][4], "[.]")[[1]][1]#
	cv<-strsplit(temp[[i]], "_")[[1]][3]#
	vals<-get_time(nomean[[i]])#
	data$n_reps[data$N==nval & data$cv==as.numeric(cv)]<-vals[1]#
	data$Etime_med[data$N==nval & data$cv== as.numeric(cv)]<- vals[2]#
	data$Etime_max[data$N==nval & data$cv==as.numeric(cv)]<- vals[3]#
	data$pr_e[data$N==nval & data$cv==as.numeric(cv)]<- vals[4]#
	rm(nval, cv, vals)#
}#
#
cols <- colorRampPalette(brewer.pal(9, "Greens"))(100)   # colors for level plots#
#levelplot(Ieq ~ pi * rho, data = epi, col.regions = cols, main = "Number infected")#
#
levelplot(pr_e ~ N * cv, data = data, col.regions = cols, main = "Proportion of simulations allowing persistence (>0.5yr)")
library(plyr)
data<- data.frame(N= rep(seq(25, 1000,25), length(seq(0.6, 1.2, 0.2))), #
	cv= rep(seq(0.6, 1.2, 0.2), each=length(seq(25, 1000,25) )), #
	n_reps=NA, Etime_med=NA, Etime_max=NA, pr_e=NA)#
#
get_time = function(d){#
	temp <- ddply(d, .(Rep), summarize, Etime=max(X))#
	ifelse(length(temp$Etime[temp$Etime>0.5])>0, #
		prop<-length(temp$Etime[temp$Etime>0.5])/length(temp$Etime), prop<-0)#
	vals<- c(length(temp[,1]), median(temp$Etime), max(temp$Etime), prop)#
	return(vals)#
}#
#
for (i in 1:length(temp)){#
	nval<- strsplit(strsplit(temp[[i]], "_")[[1]][4], "[.]")[[1]][1]#
	cv<-strsplit(temp[[i]], "_")[[1]][3]#
	vals<-get_time(nomean[[i]])#
	data$n_reps[data$N==nval & data$cv==as.numeric(cv)]<-vals[1]#
	data$Etime_med[data$N==nval & data$cv== as.numeric(cv)]<- vals[2]#
	data$Etime_max[data$N==nval & data$cv==as.numeric(cv)]<- vals[3]#
	data$pr_e[data$N==nval & data$cv==as.numeric(cv)]<- vals[4]#
	rm(nval, cv, vals)#
}#
#
cols <- colorRampPalette(brewer.pal(9, "Greens"))(100)   # colors for level plots#
#levelplot(Ieq ~ pi * rho, data = epi, col.regions = cols, main = "Number infected")#
#
levelplot(pr_e ~ N * cv, data = data, col.regions = cols, main = "Proportion of simulations allowing persistence (>0.5yr)")
data<-read.csv("~/buffalo/manyruns_data.csv")#
#
# plot mean S, I, R, M#
means1<-data[data$Rep=="mean",]#
means2<-melt(means1, id="X")#
means<-means2[means2$variable %in% c("S", "I", "R", "M"),]#
means$variable<-as.character(means$variable)#
means$value<-as.numeric(means$value)#
#
meansSIM<-means[means$variable != "R",]#
#
# Option 1: SIRM#
ggplot(means, aes(x=X, y=value, colour=variable, #
shape=variable)) + #
	geom_point() + #
	scale_shape_manual(values=c(15, 16, 17, 18)) +#
	scale_colour_brewer(palette="Dark2")#
# Option 2: SIM	#
ggplot(meansSIM, aes(x=X, y=value, colour=variable, #
shape=variable)) + #
	geom_point() + #
	scale_shape_manual(values=c(15, 16, 17)) +#
	scale_colour_brewer(palette="Dark2")#
################################################
# Learn details test	#
# ADD SOME BELLS AND WISTLES: # want 2, 8, 10, #
p<- ggplot(meansSIM, aes(x=X, y=value, colour=variable, #
shape=variable)) + #
	geom_point() + #
	scale_shape_manual(values=c(15, 16, 17)) +#
	scale_colour_brewer(palette="Dark2")+#
	ylim(0, 125)#
p + xlab("Time (days)") + ylab("Number of buffalo") +#
 theme_bw() + # removes ugly gray.#
 scale_fill_discrete(limits=c("M", "S", "I")) +						#
 theme(axis.title.x = element_text(size=15),  # sets size of axis#
 	axis.title.y = element_text(size=15),#
 	axis.text.x = element_text(size=14),#
 	axis.text.y = element_text(size=14),#
 	panel.border = element_blank(), axis.line = #
 	element_line(colour= "black"),#
 	# legend information#
 	legend.position=c(0.89,0.91), #
 	legend.background= element_rect(fill="white", colour="white"),#
 	legend.key= element_blank(), legend.title= element_blank())#
	legend.text = element_text(size=15)#
########################################################## #
###########################################################
# Now want the means as lines and all the extra data- USE THIS ONE!#
###########################################################
###########################################################
makeTransparent<-function(someColor, alpha=100)#
{#
  newColor<-col2rgb(someColor)#
  apply(newColor, 2, function(curcoldata){rgb(red=curcoldata[1], green=curcoldata[2],#
    blue=curcoldata[3],alpha=alpha, maxColorValue=255)})#
}#
#
mbrew<-brewer.pal(n=7, name="Dark2")#
display.brewer.pal(n=12, name='Paired')#
col<- mbrew[c(1,6,3)]#
# note: changed G value down from (27, 158, 119) to (27, 160, 19)#1BA013"#
# (230, 171, 2) to (230, 200, 2) "E6C802"#
# (117, 112, 179) to (117, 140, 190) "758CBE"#
colred<-c(makeTransparent("#1BA013", alpha=50), makeTransparent("#E6C802", alpha=50), makeTransparent("#758CBE", alpha=50) )#
data2<-data[data$Rep!="mean", c(1:5)]#
data3<-melt(data2, id="X")#
data3$ind<-"rep"#
data4<-data[data$Rep=="mean", c(1:5)]#
data5<-melt(data4, id="X")#
data5$ind<-"mean"#
data5$variable<-paste(data5$variable, "2", sep="")#
d<-rbind(data3, data5)#
d$variable<-as.character(d$variable)#
d<-d[d$variable!="R",]#
d<-d[d$variable!="R2",]#
d$variable<-as.factor(d$variable)#
#
# make custom color scale#
myColors<-c(colred[1], col[1], colred[2], col[2], colred[3], col[3])#
plotcol<-myColors#
plotcol2<-c(makeTransparent(col[1], alpha=20), col[1], makeTransparent(col[2], alpha=20), col[2],#
 makeTransparent(col[3], alpha=20), col[3])#
names(myColors)<-levels(d$variable)#
colScale<-scale_colour_manual(name="variable", values=myColors)#
#
p<- ggplot(d, aes(x=X, y=value, colour = variable, size= variable)) + #
	geom_point(stroke=5) + #
	scale_shape_manual(values=c(19, 20, 19, 20, 19, 20)) +#
	scale_colour_manual(values=c(plotcol2)) +#
	#scale_fill_manual(values=c(plotcol2)) +#
	scale_size_manual(values=c(0.9, 1.7, 0.9, 1.7, 0.9, 1.7))+#
	ylim(0, 150)#
#
p + xlab("Time (years)") + ylab("Number of buffalo") +#
 theme_bw() + # removes ugly gray.#
 #scale_fill_discrete(limits=c("M", "S", "I")) +	#
 theme(axis.title.x = element_text(size=15),  # sets size of axis#
 	axis.title.y = element_text(size=15),#
 	axis.text.x = element_text(size=14),#
 	axis.text.y = element_text(size=14),#
 	panel.border = element_blank(), axis.line = #
 	element_line(colour= "black"),#
 	# legend information#
 	legend.position=c(0.89,0.91), #
 	legend.background= element_rect(fill="white", colour="white"),#
 	legend.key= element_blank(), legend.title= element_blank(),#
	legend.text = element_text(size=15) )#
	#guides(colour = guide_legend(override.aes= list(colour=c(col[1], col[1], col[2], col[2], col[3], col[3]) ) ) ) )#
#
 # in stead of manual entry, could add#
 #p + colScale + xlab("Time (days)") + ylab("Number of buffalo") +#
#
# maybe a better way to build up for next time: http://stackoverflow.com/questions/17148679/ggplot2-need-to-construct-a-manual-legend-for-complicated-plot#
########################################################## #
###########################################################
# Figure 3#
###########################################################
###########################################################
setwd("~/buffalo/results_loopNcv")#
temp<-list.files(pattern="*.csv")#
myfiles = lapply(temp, read.csv)#
nreps= 4#
#
# each read in dataframe contains a parameter combination#
# with nreps replicates (4)#
nomean<-list(NA)#
for (i in 1:length(myfiles)){#
	temp<-myfiles[[i]]#
	temp2<-temp[temp$Rep!="mean",]#
	nomean[[i]]<-temp2#
	rm(temp, temp2)#
}#
#
# make long format dataframe to read into lattice#
# for each parameter combination, want probability of extinction within 10 years. (proportion of reps die out)#
data<- data.frame(N= rep(seq(25, 1000,25), length(seq(0.6, 1.2, 0.2))), #
	cv= rep(seq(0.6, 1.2, 0.2), each=length(seq(25, 1000,25) )), #
	n_reps=NA, Etime_med=NA, Etime_max=NA, pr_e=NA)#
#
get_time = function(d){#
	temp <- ddply(d, .(Rep), summarize, Etime=max(X))#
	ifelse(length(temp$Etime[temp$Etime>0.5])>0, #
		prop<-length(temp$Etime[temp$Etime>0.5])/length(temp$Etime), prop<-0)#
	vals<- c(length(temp[,1]), median(temp$Etime), max(temp$Etime), prop)#
	return(vals)#
}#
#
for (i in 1:length(temp)){#
	nval<- strsplit(strsplit(temp[[i]], "_")[[1]][4], "[.]")[[1]][1]#
	cv<-strsplit(temp[[i]], "_")[[1]][3]#
	vals<-get_time(nomean[[i]])#
	data$n_reps[data$N==nval & data$cv==as.numeric(cv)]<-vals[1]#
	data$Etime_med[data$N==nval & data$cv== as.numeric(cv)]<- vals[2]#
	data$Etime_max[data$N==nval & data$cv==as.numeric(cv)]<- vals[3]#
	data$pr_e[data$N==nval & data$cv==as.numeric(cv)]<- vals[4]#
	rm(nval, cv, vals)#
}#
#
cols <- colorRampPalette(brewer.pal(9, "Greens"))(100)   # colors for level plots#
#levelplot(Ieq ~ pi * rho, data = epi, col.regions = cols, main = "Number infected")#
#
levelplot(pr_e ~ N * cv, data = data, col.regions = cols, main = "Proportion of simulations allowing persistence (>0.5yr)")
### Lower Sabie, average condition: #
population<-function(p, condition, herd){#
surv_0 <- 0.74  # set to 1 regardless of infection status, bucause calf survival is built in the fecundity estimates. In paper set to 0.74? try both. #
surv_1 <- (1-p)*d[1+1]*surv(agecat=1, condition=condition, brucella=0, herd=herd)+p*d[1+1]*surv(agecat=1, condition=condition, brucella=1, herd=herd) #
for (i in 2:8){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=2, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=2, condition=condition, brucella=1, herd=herd))#
}#
for (i in 9:14){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=3, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=3, condition=condition, brucella=1, herd=herd))#
}#
for (i in 15:17){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=4, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=4, condition=condition, brucella=1, herd=herd))#
}#
surv_18<-0#
fec_0<-0#
fec_1<-0#
fec_2<-0#
fec_3<- (1-p)*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)#
for (i in 4:5){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd))#
}#
for (i in 6:18){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd)+p*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd))#
}#
popgrowth <-matrix(c(fec_0, fec_1, fec_2, fec_3, fec_4, fec_5, fec_6, fec_7, fec_8, fec_9, fec_10, fec_11, fec_12, fec_13, fec_14, fec_15, fec_16, fec_17, fec_18,#
	surv_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, surv_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, surv_2,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, surv_3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, surv_4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, surv_5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, surv_6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, surv_7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, surv_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, surv_9, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_10, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_11, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  surv_12, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_13, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_14, 0, 0, 0, 0,  #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_15, 0, 0, 0, #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_16, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_17, 0), nrow=19, ncol=19, byrow=TRUE)#
eigenvalues<-eigen(popgrowth)$values#
max(Re(eigenvalues[abs(Im(eigenvalues)) < 1e-6]))#
}#
#trial population<-function(p, condition, brucella, herd))#
population(p=0,condition=3, herd=0)
surv<-function(agecat, condition, brucella, herd){#
 cond=condition#
 bruc=brucella#
 baseline_mort=baseline_mort[agecat]#
	if (agecat=="1"){#
		hazardratio<-exp(Mbeta_b*bruc+Mbeta_cond*(cond-3)+Mbeta_condsq*(cond*cond-9))#
		probmort<-baseline_mort*hazardratio#
		temp<-1-probmort#
			if (temp >1) {S=1}#
			else if (temp<0) {S=0}#
			else {S=temp}#
		}#
		else {#
		hazardratio<-exp(Mbeta_b*bruc+Mbeta_cond*(cond-3)+Mbeta_condsq*(cond*cond-9)+Mbeta_h*herd)#
			 probmort<-baseline_mort*hazardratio#
			 temp<-1-probmort#
			if (temp >1) {S=1}#
			else if (temp<0) {S=0}#
			else {S=temp}#
			}#
	S#
}
population(p=0,condition=3, herd=0)
baselinesurv_prob= c(0.74, 0.95, 0.86, 0.74)  #Subadult, adult, senescent fecundity, Cross & Jolles#
baseline_mort=1-baselinesurv_prob
population(p=0,condition=3, herd=0)
Mbeta_b= 0.67375#
Mbeta_h= 0.68857#
Mbeta_cond= -3.213#
Mbeta_condsq= 0.394
population(p=0,condition=3, herd=0)
surv(1,3,0,0)  # 'baseline' survival rate for yearling in LS
x<-seq(1,19)  # for ages 0 to 18 (index lower level.  all die between 18 and 19. )
### Lower Sabie, average condition: #
population<-function(p, condition, herd){#
surv_0 <- 0.74  # set to 1 regardless of infection status, bucause calf survival is built in the fecundity estimates. In paper set to 0.74? try both. #
surv_1 <- (1-p)*d[1+1]*surv(agecat=1, condition=condition, brucella=0, herd=herd)+p*d[1+1]*surv(agecat=1, condition=condition, brucella=1, herd=herd) #
for (i in 2:8){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=2, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=2, condition=condition, brucella=1, herd=herd))#
}#
for (i in 9:14){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=3, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=3, condition=condition, brucella=1, herd=herd))#
}#
for (i in 15:17){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=4, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=4, condition=condition, brucella=1, herd=herd))#
}#
surv_18<-0#
fec_0<-0#
fec_1<-0#
fec_2<-0#
fec_3<- (1-p)*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)#
for (i in 4:5){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd))#
}#
for (i in 6:18){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd)+p*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd))#
}#
popgrowth <-matrix(c(fec_0, fec_1, fec_2, fec_3, fec_4, fec_5, fec_6, fec_7, fec_8, fec_9, fec_10, fec_11, fec_12, fec_13, fec_14, fec_15, fec_16, fec_17, fec_18,#
	surv_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, surv_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, surv_2,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, surv_3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, surv_4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, surv_5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, surv_6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, surv_7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, surv_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, surv_9, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_10, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_11, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  surv_12, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_13, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_14, 0, 0, 0, 0,  #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_15, 0, 0, 0, #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_16, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_17, 0), nrow=19, ncol=19, byrow=TRUE)#
eigenvalues<-eigen(popgrowth)$values#
max(Re(eigenvalues[abs(Im(eigenvalues)) < 1e-6]))#
}#
#trial population<-function(p, condition, brucella, herd))#
population(p=0,condition=3, herd=0)
fec<-function(agecat, condition, herd){#
	cond=condition#
	bruc=brucella#
	baseline=baseline[agecat]#
	oddsratio<-exp(Fbeta_c*cond)#
	prob<-(oddsratio*baseline)/(1+ oddsratio*baseline) #
	#if (prob >1) {P=1}#
	#else if (prob<0) {P=0}#
	#else {P=prob}#
	#P#
	prob#
}
### Lower Sabie, average condition: #
population<-function(p, condition, herd){#
surv_0 <- 0.74  # set to 1 regardless of infection status, bucause calf survival is built in the fecundity estimates. In paper set to 0.74? try both. #
surv_1 <- (1-p)*d[1+1]*surv(agecat=1, condition=condition, brucella=0, herd=herd)+p*d[1+1]*surv(agecat=1, condition=condition, brucella=1, herd=herd) #
for (i in 2:8){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=2, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=2, condition=condition, brucella=1, herd=herd))#
}#
for (i in 9:14){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=3, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=3, condition=condition, brucella=1, herd=herd))#
}#
for (i in 15:17){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=4, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=4, condition=condition, brucella=1, herd=herd))#
}#
surv_18<-0#
fec_0<-0#
fec_1<-0#
fec_2<-0#
fec_3<- (1-p)*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)#
for (i in 4:5){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd))#
}#
for (i in 6:18){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd)+p*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd))#
}#
popgrowth <-matrix(c(fec_0, fec_1, fec_2, fec_3, fec_4, fec_5, fec_6, fec_7, fec_8, fec_9, fec_10, fec_11, fec_12, fec_13, fec_14, fec_15, fec_16, fec_17, fec_18,#
	surv_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, surv_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, surv_2,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, surv_3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, surv_4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, surv_5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, surv_6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, surv_7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, surv_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, surv_9, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_10, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_11, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  surv_12, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_13, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_14, 0, 0, 0, 0,  #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_15, 0, 0, 0, #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_16, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_17, 0), nrow=19, ncol=19, byrow=TRUE)#
eigenvalues<-eigen(popgrowth)$values#
max(Re(eigenvalues[abs(Im(eigenvalues)) < 1e-6]))#
}#
#trial population<-function(p, condition, brucella, herd))#
population(p=0,condition=3, herd=0)
condition<-seq(1,5,0.2)   #21 long#
brucella<-c(0,1,0,1)#
herd<-c(0,0,1,1)
### Lower Sabie, average condition: #
population<-function(p, condition, herd){#
surv_0 <- 0.74  # set to 1 regardless of infection status, bucause calf survival is built in the fecundity estimates. In paper set to 0.74? try both. #
surv_1 <- (1-p)*d[1+1]*surv(agecat=1, condition=condition, brucella=0, herd=herd)+p*d[1+1]*surv(agecat=1, condition=condition, brucella=1, herd=herd) #
for (i in 2:8){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=2, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=2, condition=condition, brucella=1, herd=herd))#
}#
for (i in 9:14){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=3, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=3, condition=condition, brucella=1, herd=herd))#
}#
for (i in 15:17){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=4, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=4, condition=condition, brucella=1, herd=herd))#
}#
surv_18<-0#
fec_0<-0#
fec_1<-0#
fec_2<-0#
fec_3<- (1-p)*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)#
for (i in 4:5){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd))#
}#
for (i in 6:18){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd)+p*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd))#
}#
popgrowth <-matrix(c(fec_0, fec_1, fec_2, fec_3, fec_4, fec_5, fec_6, fec_7, fec_8, fec_9, fec_10, fec_11, fec_12, fec_13, fec_14, fec_15, fec_16, fec_17, fec_18,#
	surv_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, surv_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, surv_2,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, surv_3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, surv_4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, surv_5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, surv_6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, surv_7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, surv_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, surv_9, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_10, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_11, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  surv_12, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_13, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_14, 0, 0, 0, 0,  #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_15, 0, 0, 0, #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_16, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_17, 0), nrow=19, ncol=19, byrow=TRUE)#
eigenvalues<-eigen(popgrowth)$values#
max(Re(eigenvalues[abs(Im(eigenvalues)) < 1e-6]))#
}#
#trial population<-function(p, condition, brucella, herd))#
population(p=0,condition=3, herd=0)
baseline_prob= c(0.51, 0.64, 0.6)  #Subadult, adult, senescent fecundity, LS, Funstun 1999#
baseline_condition3=baseline_prob/(1-baseline_prob)#
# let baseline given in literature be at the median value= 3#
baseline<-baseline_condition3*(exp(-3*Fbeta_c))
###################################################
library(lme4)#
library(survival)#
library(arm)#
#
##################################################
##################################################
###################################################
#####################Outline#########################
#1) Re-fit statistical models for summary of effect#
#2) Define fecls and feccb as functions of bruc, condition, and baseline; check realism#
#3) Define survls and survcb as functions of bruc, condition, and baseline; check realism#
#4) Populate the populate the matrix. #
#5) Simulations based on condition distribution and plot results for fig#
##################################################
##################################################
##################################################
#
##################################################
##################################################
# 1) Re-fit statistical models for summary of effect#
##################################################
##################################################
# Data#
fec<-read.csv("~/Documents/phd research/Brucellosis/Bruc_epipaper/fecundity_Mar2013/Fecdata_Mar2013_contonly_susremoved_calf_nolessthan3.csv")#
 fecuse<-fec[fec$seasonindbirth=="Cbuse",]#
 fecuse<-fecuse[!is.na(fecuse$previouscapturecondition),]#
fecuse$resid<-resid(lm(fecuse$previouscapturecondition~fecuse$previouscapturemonth))#
#
## Fecundity model, condition#
test.mod<-glmer(calf_cat_better ~age_yrsel+I(age_yrsel^2)+ previouscapturecondition +(1|Animal.ID), #
  family=binomial(link="logit"), data=fecuse); summary(test.mod); extractAIC(test.mod)#
#
# Fixed effects:#
#                                  Estimate Std. Error z value Pr(>|z|)    #
#(Intercept)                   -12.17830    3.35058  -3.635 0.000278 ***#
#age_yrsel                        1.48580    0.69947   2.124 0.033654 *  #
#I(age_yrsel^2)               -0.07543    0.04064  -1.856 0.063465 .  #
#previouscapturecondition  1.51809    0.56646   2.680 0.007363 ** #
### Mortality model#
test2<-read.csv("~/Documents/phd research/Brucellosis/Brucella Data/Survival/Dec2012/final datasheets/brucsurvival_controls_longresidnomissing_noerrors_season_cond.csv")#
test.mod<-coxph(Surv(start, stop, death.time)~brucella+herd2+ age_yr +I(age_yr ^2)+ condition +I(condition^2), data=test2);  #
# n= 1442, number of events= 43 #
#                   	coef 			exp(coef) se(coef)      z 		Pr(>|z|)    #
#brucella        	0.67375   	1.96157  0.32185  	2.093 	0.036317 *  #
#herd2CB         	0.68857   	1.99086  0.37929  	1.815 	0.069462 .  #
#age_yr           -0.87804   	0.41560  0.30169 	-2.910 	0.003610 ** #
#I(age_yr^2)    0.06170   	1.06364  0.02472  	2.496 	0.012550 *  #
#condition       -3.21301   	0.04024  0.93400 	-3.440 	0.000582 ***#
#I(condition^2) 0.39400   	1.48290  0.16355  	2.409 	0.015993 *  #
########
#              		exp(coef) exp(-coef) lower .95 upper .95#
#brucella         	1.96157     0.5098   1.04387    3.6861#
#herd2CB          1.99086     0.5023   0.94665    4.1869#
#age_yr           	0.41560     2.4062   0.23008    0.7507#
#I(age_yr^2)    1.06364     0.9402   1.01334    1.1164#
#condition        	0.04024    24.8538   0.00645    0.2510#
#I(condition^2) 1.48290     0.6744   1.07621    2.0433#
#
#Concordance= 0.73  (se = 0.047 )#
#Rsquare= 0.025   (max possible= 0.23 )#
#Likelihood ratio test= 36.5  on 6 df,   p=2.2e-06#
#Wald test            = 39.22  on 6 df,   p=6.495e-07#
#Score (logrank) test = 45.62  on 6 df,   p=3.518e-08#
#
#                        coef        exp(coef) se(coef)      z Pr(>|z|)    #
#brucella            0.67375   1.96157  0.32185  2.093 0.036317 *  #
#herd2CB           0.68857   1.99086  0.37929  1.815 0.069462 .  #
#age_yr             -0.87804   0.41560  0.30169 -2.910 0.003610 ** #
#I(age_yr^2)      0.06170   1.06364  0.02472  2.496 0.012550 *  #
#cond_sd           -0.53780   0.58403  0.15992 -3.363 0.000771 ***    # exp(-0.537*sd(cond))=0.6719979#
#I(cond_sd^2)    0.18259   1.20032  0.07579  2.409 0.015993 *        # exp(-0.537*sd(cond^2)) #
#
#sd= 0.6807486
### Fecundity, LS#
# Generate odds ratio as a function of bruc, condition, and baseline.  #
Fbeta_c= 1.518#
#
# Fbeta_cseas  # also a wet season*condition term I am ignoring. #
baseline_prob= c(0.51, 0.64, 0.6)  #Subadult, adult, senescent fecundity, LS, Funstun 1999#
baseline_condition3=baseline_prob/(1-baseline_prob)#
# let baseline given in literature be at the median value= 3#
baseline<-baseline_condition3*(exp(-3*Fbeta_c))#
brucella=c(0,1)#
herd=c(0,1)#
condition<-seq(1,5,0.2)   #21 long#
cond<-NA; bruc<-NA#
#age=5#
#herd=0#
#season=1#
Fecundity<-data.frame(LS=rep(NA, 21), CB=rep(NA, 21))  #for subadult ageclass (becuase baseline[1])#
rownames(Fecundity)=condition#
for (i in 1:length(condition)){#
	for (j in 1:2){#
		cond=condition[i]#
    	herd=herd[j]#
		oddsratio<-exp(Fbeta_c*cond)#
		prob<-(oddsratio*baseline[1])/(1+ oddsratio*baseline[1])  # prob= o/(1+o), odds=(OR*base)#
		Fecundity[i,j]<-prob#
}#
}#
plot(x=condition, y=Fecundity$LS, ylim=c(0,1), pch=19, col="black", ylab="Probability with a calf")#
points(x=condition, y=Fecundity$CB, ylim=c(0,1), pch=19, col="red")#
legend("topright", legend=c("LS", "CB"), col=c("black", "red"), pch=19)#
abline(v=2.5, lty=3); abline(v=3.5, lty=3); abline(v=3, lty=2); abline(v=1.25, lty=5); abline(v=4, lty=5)#
abline(v=2.5, lty=3, col="red"); abline(v=3.25, lty=3, col="red"); abline(v=2.75, lty=2, col="red"); abline(v=1.25, lty=5, col="red"); abline(v=3.75, lty=5, col="red")
fec<-function(agecat, condition, herd){#
	cond=condition#
	bruc=brucella#
	baseline=baseline[agecat]#
	oddsratio<-exp(Fbeta_c*cond)#
	prob<-(oddsratio*baseline)/(1+ oddsratio*baseline) #
	#if (prob >1) {P=1}#
	#else if (prob<0) {P=0}#
	#else {P=prob}#
	#P#
	prob#
}#
##################################################
##################################################
## 3) Define survls, survcb as funcitons of condition, agecat, brucella#
##################################################
##################################################
# betas from model in postreview paper. #
Mbeta_b= 0.67375#
Mbeta_h= 0.68857#
Mbeta_cond= -3.213#
Mbeta_condsq= 0.394#
baselinesurv_prob= c(0.74, 0.95, 0.86, 0.74)  #Subadult, adult, senescent fecundity, Cross & Jolles#
baseline_mort=1-baselinesurv_prob#
#baselinemort<-baselinemort_cond3/(exp(3*Mbeta_cond+3*Mbeta_condsq))
surv<-function(agecat, condition, brucella, herd){#
 cond=condition#
 bruc=brucella#
 baseline_mort=baseline_mort[agecat]#
	if (agecat=="1"){#
		hazardratio<-exp(Mbeta_b*bruc+Mbeta_cond*(cond-3)+Mbeta_condsq*(cond*cond-9))#
		probmort<-baseline_mort*hazardratio#
		temp<-1-probmort#
			if (temp >1) {S=1}#
			else if (temp<0) {S=0}#
			else {S=temp}#
		}#
		else {#
		hazardratio<-exp(Mbeta_b*bruc+Mbeta_cond*(cond-3)+Mbeta_condsq*(cond*cond-9)+Mbeta_h*herd)#
			 probmort<-baseline_mort*hazardratio#
			 temp<-1-probmort#
			if (temp >1) {S=1}#
			else if (temp<0) {S=0}#
			else {S=temp}#
			}#
	S#
}#
surv(1,3,0,0)
convertcond<-read.csv("~/Documents/phd research/big datasheets_updated to March2013/brconverterseDemogall_Jan2013dbupdate_annaages_TBaddedMay2013.csv")#
condition<-read.csv("~/Documents/phd research/Brucellosis/Bruc_epipaper/fecundity_Mar2013/Fecdata_Mar2013_contonly_susremoved_calf_nolessthan3.csv")
prevdist<-c(rep(0.9412,2), rep(0.667355,2), rep(0.97692,2), rep(1.3889,3), rep(1.2186, 10))#
prevdistold<-c(0.2428, 0.2428, 0.7572, 0.7572, 0.87868, 0.87868, 1.6251, 1.6251, 1.6251, rep(1.3005, 10))#
d<-prevdist#
# check consistent with surv_zero and surv_one agecat values... and herd transition. #
#
#recall: fec<-function(agecat, condition, brucella, herd); agecat can equal 1=subadult, 2=adult, 3=senescent#
# recall: surv<-function(agecat, condition, brucella, herd); agecat can equal 1=yearling, 2=adult, 3=mature adult, 4=senescent#
#
x<-seq(1,19)  # for ages 0 to 18 (index lower level.  all die between 18 and 19. )#
### Lower Sabie, average condition: #
population<-function(p, condition, herd){#
surv_0 <- 0.74  # set to 1 regardless of infection status, bucause calf survival is built in the fecundity estimates. In paper set to 0.74? try both. #
surv_1 <- (1-p)*d[1+1]*surv(agecat=1, condition=condition, brucella=0, herd=herd)+p*d[1+1]*surv(agecat=1, condition=condition, brucella=1, herd=herd) #
for (i in 2:8){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=2, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=2, condition=condition, brucella=1, herd=herd))#
}#
for (i in 9:14){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=3, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=3, condition=condition, brucella=1, herd=herd))#
}#
for (i in 15:17){#
	assign(paste("surv", x[i], sep="_"), (1-p)*d[x[i]+1]*surv(agecat=4, condition = condition, brucella= 0, herd=herd)+p*d[x[i]+1]*surv(agecat=4, condition=condition, brucella=1, herd=herd))#
}#
surv_18<-0#
fec_0<-0#
fec_1<-0#
fec_2<-0#
fec_3<- (1-p)*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=1, condition=condition, herd=herd)#
for (i in 4:5){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd)+p*d[x[i]+1]*fec(agecat=2, condition=condition, herd=herd))#
}#
for (i in 6:18){#
	assign(paste("fec", x[i], sep="_"), (1-p)*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd)+p*d[x[i]+1]*fec(agecat=3, condition=condition,  herd=herd))#
}#
popgrowth <-matrix(c(fec_0, fec_1, fec_2, fec_3, fec_4, fec_5, fec_6, fec_7, fec_8, fec_9, fec_10, fec_11, fec_12, fec_13, fec_14, fec_15, fec_16, fec_17, fec_18,#
	surv_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, surv_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, surv_2,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, surv_3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, surv_4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, surv_5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, surv_6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, surv_7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, surv_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, surv_9, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_10, 0, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_11, 0, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  surv_12, 0, 0, 0, 0, 0, 0, #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_13, 0, 0, 0, 0, 0,  #
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_14, 0, 0, 0, 0,  #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_15, 0, 0, 0, #
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_16, 0, 0,#
	 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, surv_17, 0), nrow=19, ncol=19, byrow=TRUE)#
eigenvalues<-eigen(popgrowth)$values#
max(Re(eigenvalues[abs(Im(eigenvalues)) < 1e-6]))#
}#
#trial population<-function(p, condition, brucella, herd))#
population(p=0,condition=3, herd=0)
p<-seq(0,0.5, 0.02)#
#
xval= seq(0, 0.5, 0.02)  # length=26#
yval<-seq(2.5,3.5,0.1)     # 21 options#
Zf<-function(X, Y){#
	population(p=X, condition=Y, herd=0)#
}#
z<-matrix(NA, nrow=length(xval), ncol=length(yval))#
for (i in 1:length(xval)){#
	temp_prev=xval[i]#
	for (j in 1:length(yval)){#
		temp_cond=yval[j]#
		z[i,j]<-Zf(X=temp_prev, Y=temp_cond)#
	}	#
}#
#
nrz<-nrow(z)#
ncz<-ncol(z)#
jet.colors<-colorRampPalette(c("white", "black"))#
nbcol<-100#
color<-jet.colors(nbcol)#
zfacet<-z[-1,-1]+z[-1, ncz]+z[-nrz, -1]+z[-nrz, -ncz]#
facetcol<-cut(zfacet, nbcol)#
#
persp(x=xval, y=yval, z=z, theta=-40, col=color[facetcol],axes=TRUE, ticktype="detailed", tck=0.01, xlab="Brucellosis prevalence", ylab="Body condition score", zlab="")   # theta=x, degree to move the viewing angle left/right.  use phi to move up/down#
#axes3d("x", labels=TRUE)
# option 2#
library(ggplot2)#
library("gcookbook")#
#
xval= seq(0, 0.5, 0.02)  # length=26#
yval<-seq(2.5,3.5,0.1)    #
XY=expand.grid(X=xval, Y=yval)  #Create a data frame from all combinations of the supplied vectors or factors.--> 2 col df.#
#population(p=0,condition=3, herd=0)#
Zf<-function(X, Y){#
	population(p=X, condition=Y, herd=0)#
}#
Z<-NA#
for (i in 1:length(XY$X)){#
	Z[i]<-Zf(XY$X[i], XY$Y[i])#
}#
#
# prep color matricies here, make new matrix zcol, with same range as z, but expanded...#
range<-seq(1.022772, 1.173967, by=(1.173967-1.022772)/(100-1))#
rangeind<-seq(1,100, by=1)/100#
zcol<-matrix(rep(NA, 546), ncol=length(yval), nrow=length(xval))#
plotcol<-matrix(rep(NA, 546), ncol=length(yval), nrow=length(xval))#
#
#color_ramp=ramp.col(c("white", "black"), alpha=0.5)#
#color_ramp2=colorRampPalette(color_ramp)#
color_ramp=colorRampPalette(c("white", "black"))#
# Check for and replace any NAs#
zcol[1,3]=1#
for (i in 1:length(xval)){#
for (j in 1:length(yval)){#
	for (n in 1:(99)){#
	min<-range[n]-0.0001#
	max<-range[n+1]#
	if (z[i,j]>min & z[i,j]<max) {zcol[i,j]<-rangeind[n]}#
	else {zcol[i,j]<-zcol[i,j]}#
	}#
	#plotcol[i,j]<-color_ramp(zcol[i,j])#
	} }#
	zcol[is.na(zcol)]<-0#
#
zcol2<-(1-zcol)^2#
color<-grey(zcol2)#
#
# plot specifications#
plot3d(x=xval[1:21], z=seq(1.02, 1.18, length.out=21), y=yval, xlab="", ylab="", zlab="", box=FALSE, axes=FALSE, col="white")  #later take off labels and add with mtext. #xlab="Brucellosis prevalence", ylab="", zlab="Body condition"#
surface3d(x=xval, z=matrix(Z, length(xval)), y=yval, color=color, alpha=0.5)  # col=color[facetcol] #col=color,#
for (i in 1:length(xval)){#
lines3d(x=rep(xval[i], length(yval)), z=z[i,], y=yval, color="black", add=TRUE)}  # col=color[facetcol] #col=color,#
for (i in 1:length(yval)){#
lines3d(x=xval, z=z[,i], y=rep(yval[i], length(xval)), color="black", add=TRUE)} #
grid3d("x+")#
grid3d("y+")#
grid3d("z-")#
axes3d("x", cex.lab=2, tick=FALSE, labels=TRUE) #, font=list(family="Arial Black"))  #at=c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5)#
axes3d("y", cex.lab=2, tick=FALSE, labels=TRUE) #, font="Arial Black")  at=c(2.6, 2.8, 3.0, 3.2, 3.4)#
axes3d("z-+", cex.lab=2, tick=FALSE, labels=TRUE) #at=c(1.04, 1.06, 1.08, 1.10, 1.12, 1.14, 1.16)
